generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  reviews   Review[]
  wishlist  Wishlist[]
  cart      CartItem[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  salePrice   Decimal? @db.Decimal(10, 2)
  sku         String   @unique
  stock       Int      @default(0)
  images      String?  @db.Text
  weight      Int?
  dimensions  String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  category     Category     @relation(fields: [categoryId], references: [id])
  orderItems   OrderItem[]
  reviews      Review[]
  wishlist     Wishlist[]
  cartItems    CartItem[]
  productSizes ProductSize[]

  @@map("products")
}

model ProductSize {
  id        String  @id @default(cuid())
  productId String
  size      String
  stock     Int     @default(0)
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_sizes")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  shippingAddress String      @db.Text
  shippingCost    Decimal     @db.Decimal(10, 2)
  subtotal        Decimal     @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  notes           String?
  trackingNumber  String?
  courier         String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  size      String?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  method        String
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@unique([orderId, transactionId]) // <--- Tambahkan baris ini!
  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId, size])
  @@map("cart_items")
}

model Banner {
  id        String   @id @default(cuid())
  title     String
  subtitle  String?
  image     String
  link      String?
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banners")
}

model Promotion {
  id          String     @id @default(cuid())
  name        String
  code        String     @unique
  type        PromoType
  value       Decimal    @db.Decimal(10, 2)
  minPurchase Decimal?   @db.Decimal(10, 2)
  maxDiscount Decimal?   @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean    @default(true)
  usageLimit  Int?
  usageCount  Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("promotions")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum PromoType {
  PERCENTAGE
  FIXED_AMOUNT
}
